{"version":3,"file":"static/js/8483.1d0f3fe0.chunk.js","mappings":"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","sources":["views/dashboards/dashboard1-components/ProductPerformance.js","views/dashboards/dashboard1-components/SalesOverview.js","views/dashboards/dashboard1-components/DailyActivities.js","views/dashboards/Dashboard1.js","views/dashboards/dashboard1-components/ExTable.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Box,\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n} from \"@mui/material\";\r\n\r\nimport ExTable from \"./ExTable\";\r\n\r\nconst ProductPerformance = () => {\r\n  const [age, setAge] = React.useState(\"10\");\r\n\r\n  const handleChange = (event) => {\r\n    setAge(event.target.value);\r\n  };\r\n  return (\r\n    <Card variant=\"outlined\">\r\n      <CardContent>\r\n        <Box\r\n          sx={{\r\n            display: {\r\n              sm: \"flex\",\r\n              xs: \"block\",\r\n            },\r\n            alignItems: \"flex-start\",\r\n          }}\r\n        >\r\n          <Box>\r\n            <Typography\r\n              variant=\"h3\"\r\n              sx={{\r\n                marginBottom: \"0\",\r\n              }}\r\n              gutterBottom\r\n            >\r\n              Product Performance\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Box\r\n            sx={{\r\n              marginLeft: \"auto\",\r\n              mt: {\r\n                lg: 0,\r\n                xs: 2,\r\n              },\r\n            }}\r\n          >\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <Select\r\n                labelId=\"demo-simple-select-standard-label\"\r\n                id=\"demo-simple-select-standard\"\r\n                value={age}\r\n                onChange={handleChange}\r\n                label=\"Age\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                <MenuItem value={10}>March 2021</MenuItem>\r\n                <MenuItem value={20}>April 2021</MenuItem>\r\n                <MenuItem value={30}>Jun 2021</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            overflow: \"auto\",\r\n            mt: 3,\r\n          }}\r\n        >\r\n          <ExTable />\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProductPerformance;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Card, CardContent, Typography, Box } from \"@mui/material\";\r\nimport Chart from 'react-apexcharts';\r\nimport { styled } from '@mui/material/styles';\r\nimport axios from \"axios\"; // Import Axios\r\nimport { \r\n  ShoppingCart as ShoppingCartIcon,\r\n  HourglassEmpty as HourglassEmptyIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Today as TodayIcon,\r\n  CalendarToday as CalendarTodayIcon\r\n} from '@mui/icons-material';\r\n\r\n// Styled component for the logo\r\nconst Logo = styled('img')({\r\n  maxWidth: '150px',\r\n  height: 'auto',\r\n  display: 'block',\r\n  margin: '0 auto',\r\n});\r\n\r\nconst token = localStorage.getItem('token')\r\nconst MetricBox = styled(Box)(({ theme }) => ({\r\n  padding: theme.spacing(2),\r\n  borderRadius: theme.shape.borderRadius,\r\n  boxShadow: theme.shadows[1],\r\n  textAlign: 'center',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  flexDirection: 'column',\r\n  marginBottom: theme.spacing(2),\r\n  [theme.breakpoints.down('sm')]: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst MetricIcon = styled(Box)(({ theme }) => ({\r\n  marginBottom: theme.spacing(1),\r\n  fontSize: '2rem',\r\n}));\r\n\r\nconst SalesOverview = () => {\r\n  // State to hold order data\r\n  const [orderData, setOrderData] = useState({\r\n    totalOrders: 0,\r\n    pendingOrders: 0,\r\n    completedOrders: 0,\r\n    todaysOrders: 0,\r\n    monthlyOrders: 0,\r\n    salesOverview: [],\r\n  });\r\n\r\n  // Function to fetch orders from the API\r\n  const fetchOrderData = async () => {\r\n    try {\r\n      const response = await axios.get(\"https://bepocart.in/admin/Bepocart-Orders/\",{\r\n        headers: {\r\n          'Authorization': `${token}`,\r\n      },\r\n      }); // Update with your actual API endpoint\r\n      const orders = response.data.data;\r\n\r\n      // Calculate the different order statistics from the response data\r\n      const totalOrders = orders.length;\r\n      const pendingOrders = orders.filter(order => order.status === 'pending').length;\r\n      const completedOrders = orders.filter(order => order.status === 'Completed').length;\r\n      const todaysOrders = orders.filter(order => new Date(order.created_at).toDateString() === new Date().toDateString()).length;\r\n      const monthlyOrders = orders.filter(order => new Date(order.created_at).getMonth() === new Date().getMonth()).length;\r\n\r\n      // Mock sales data for the chart\r\n      const salesOverview = [\r\n        {\r\n          name: \"Ample Admin\",\r\n          data: [355, 390, 300, 350, 390, 180, 355, 390, 300, 350, 390, 180],\r\n        },\r\n        {\r\n          name: \"Pixel Admin\",\r\n          data: [280, 250, 325, 215, 250, 310, 280, 250, 325, 215, 250, 310],\r\n        },\r\n      ];\r\n\r\n      // Update state with the fetched data\r\n      setOrderData({\r\n        totalOrders,\r\n        pendingOrders,\r\n        completedOrders,\r\n        todaysOrders,\r\n        monthlyOrders,\r\n        salesOverview,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching order data\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch order data when the component is mounted\r\n  useEffect(() => {\r\n    fetchOrderData();\r\n  }, []);\r\n\r\n  // Chart options and data\r\n  const optionssalesoverview = {\r\n    grid: {\r\n      show: true,\r\n      borderColor: \"transparent\",\r\n      strokeDashArray: 2,\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n      },\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: false,\r\n        columnWidth: \"42%\",\r\n        endingShape: \"rounded\",\r\n        borderRadius: 5,\r\n      },\r\n    },\r\n    colors: [\"#1e4db7\", \"#a7e3f4\"],\r\n    fill: {\r\n      type: \"solid\",\r\n      opacity: 1,\r\n    },\r\n    chart: {\r\n      offsetX: -15,\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n      foreColor: \"#adb0bb\",\r\n      fontFamily: \"'DM Sans',sans-serif\",\r\n      sparkline: {\r\n        enabled: false,\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    markers: {\r\n      size: 0,\r\n    },\r\n    legend: {\r\n      show: false,\r\n    },\r\n    xaxis: {\r\n      type: \"category\",\r\n      categories: [\r\n        \"Jan\",\r\n        \"Feb\",\r\n        \"Mar\",\r\n        \"Apr\",\r\n        \"May\",\r\n        \"Jun\",\r\n        \"July\",\r\n        \"Aug\",\r\n        \"Sept\",\r\n        \"Oct\",\r\n        \"Nov\",\r\n        \"Dec\",\r\n      ],\r\n      labels: {\r\n        style: {\r\n          cssClass: \"grey--text lighten-2--text fill-color\",\r\n        },\r\n      },\r\n    },\r\n    yaxis: {\r\n      show: true,\r\n      min: 100,\r\n      max: 400,\r\n      tickAmount: 3,\r\n      labels: {\r\n        style: {\r\n          cssClass: \"grey--text lighten-2--text fill-color\",\r\n        },\r\n      },\r\n    },\r\n    stroke: {\r\n      show: true,\r\n      width: 5,\r\n      lineCap: \"butt\",\r\n      colors: [\"transparent\"],\r\n    },\r\n    tooltip: {\r\n      theme: \"dark\",\r\n    },\r\n  };\r\n\r\n  const seriessalesoverview = orderData.salesOverview;\r\n\r\n  return (\r\n    <Card\r\n      variant=\"outlined\"\r\n      sx={{\r\n        paddingBottom: \"0\",\r\n      }}\r\n    >\r\n      <CardContent\r\n        sx={{\r\n          paddingBottom: \"16px !important\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            marginBottom: '20px',\r\n          }}\r\n        >\r\n          <Typography\r\n            variant=\"h3\"\r\n            sx={{\r\n              marginTop: \"10px\",\r\n              marginBottom: \"0\",\r\n            }}\r\n            gutterBottom\r\n          >\r\n            Sales Overview\r\n          </Typography>\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'space-between',\r\n            gap: 2,\r\n            marginBottom: '25px',\r\n          }}\r\n        >\r\n          <MetricBox sx={{ backgroundColor: '#e3f2fd' }}>\r\n            <MetricIcon>\r\n              <ShoppingCartIcon sx={{ color: '#1e4db7' }} />\r\n            </MetricIcon>\r\n            <Typography variant=\"h5\" sx={{ color: '#1e4db7' }}>Total Orders</Typography>\r\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{orderData.totalOrders}</Typography>\r\n          </MetricBox>\r\n          <MetricBox sx={{ backgroundColor: '#fce4ec' }}>\r\n            <MetricIcon>\r\n              <HourglassEmptyIcon sx={{ color: '#ff5722' }} />\r\n            </MetricIcon>\r\n            <Typography variant=\"h5\" sx={{ color: '#ff5722' }}>Pending Orders</Typography>\r\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{orderData.pendingOrders}</Typography>\r\n          </MetricBox>\r\n          <MetricBox sx={{ backgroundColor: '#e8f5e9' }}>\r\n            <MetricIcon>\r\n              <CheckCircleIcon sx={{ color: '#4caf50' }} />\r\n            </MetricIcon>\r\n            <Typography variant=\"h5\" sx={{ color: '#4caf50' }}>Completed Orders</Typography>\r\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{orderData.completedOrders}</Typography>\r\n          </MetricBox>\r\n          <MetricBox sx={{ backgroundColor: '#e1bee7' }}>\r\n            <MetricIcon>\r\n              <TodayIcon sx={{ color: '#ab47bc' }} />\r\n            </MetricIcon>\r\n            <Typography variant=\"h5\" sx={{ color: '#ab47bc' }}>Today's Orders</Typography>\r\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{orderData.todaysOrders}</Typography>\r\n          </MetricBox>\r\n          <MetricBox sx={{ backgroundColor: '#d0f0c0' }}>\r\n            <MetricIcon>\r\n              <CalendarTodayIcon sx={{ color: '#66bb6a' }} />\r\n            </MetricIcon>\r\n            <Typography variant=\"h5\" sx={{ color: '#66bb6a' }}>Monthly Orders</Typography>\r\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>{orderData.monthlyOrders}</Typography>\r\n          </MetricBox>\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            marginTop: \"25px\",\r\n          }}\r\n        >\r\n          <Chart\r\n            options={optionssalesoverview}\r\n            series={seriessalesoverview}\r\n            type=\"bar\"\r\n            height=\"295px\"\r\n          />\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SalesOverview;\r\n","import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Box,\r\n  Menu,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\n\r\nimport MoreVertOutlinedIcon from '@mui/icons-material/MoreVertOutlined';\r\n\r\nimport Timeline from \"@mui/lab/Timeline\";\r\nimport TimelineItem from \"@mui/lab/TimelineItem\";\r\nimport TimelineSeparator from \"@mui/lab/TimelineSeparator\";\r\nimport TimelineConnector from \"@mui/lab/TimelineConnector\";\r\nimport TimelineContent from \"@mui/lab/TimelineContent\";\r\nimport TimelineDot from \"@mui/lab/TimelineDot\";\r\nimport TimelineOppositeContent from \"@mui/lab/TimelineOppositeContent\";\r\n\r\nconst options = [\"Action\", \"Another Action\", \"Something else here\"];\r\n\r\nconst activities = [\r\n  {\r\n    time: \"09.50\",\r\n    color: \"success.main\",\r\n    text: \"Meeting with John\",\r\n  },\r\n  {\r\n    time: \"09.46\",\r\n    color: \"secondary.main\",\r\n    text: \"Payment received from John Doe of $385.90\",\r\n  },\r\n  {\r\n    time: \"09.47\",\r\n    color: \"primary.main\",\r\n    text: \"Project Meeting\",\r\n  },\r\n  {\r\n    time: \"09.48\",\r\n    color: \"warning.main\",\r\n    text: \"New Sale recorded #ML-3467\",\r\n  },\r\n  {\r\n    time: \"09.49\",\r\n    color: \"error.main\",\r\n    text: \"Payment was made of $64.95 to Michael Anderson\",\r\n  },\r\n];\r\n\r\nconst DailyActivities = () => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  return (\r\n    <Card\r\n      variant=\"outlined\"\r\n      sx={{\r\n        pb: 0,\r\n      }}\r\n    >\r\n      <CardContent\r\n        sx={{\r\n          pb: \"0 !important\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            alignItems: \"flex-start\",\r\n            mb: 5,\r\n          }}\r\n        >\r\n          <Box>\r\n            <Typography\r\n              sx={{\r\n                fontWeight: \"500\",\r\n                fontSize: \"h3.fontSize\",\r\n                marginBottom: \"0\",\r\n              }}\r\n              gutterBottom\r\n            >\r\n              Daily Activities\r\n            </Typography>\r\n            <Typography\r\n              color=\"textSecondary\"\r\n              variant=\"body1\"\r\n              sx={{\r\n                fontWeight: \"400\",\r\n                fontSize: \"13px\",\r\n              }}\r\n            >\r\n              Overview of Years\r\n            </Typography>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              marginLeft: \"auto\",\r\n            }}\r\n          >\r\n            <IconButton\r\n              aria-expanded={open ? \"true\" : undefined}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleClick}\r\n            >\r\n              <MoreVertOutlinedIcon />\r\n            </IconButton>\r\n            <Menu\r\n              id=\"long-menu\"\r\n              MenuListProps={{\r\n                \"aria-labelledby\": \"long-button\",\r\n              }}\r\n              anchorEl={anchorEl}\r\n              open={open}\r\n              onClose={handleClose}\r\n              anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"right\",\r\n              }}\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n            >\r\n              {options.map((option) => (\r\n                <MenuItem\r\n                  key={option}\r\n                  selected={option === \"Pyxis\"}\r\n                  onClick={handleClose}\r\n                >\r\n                  {option}\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n        </Box>\r\n        <Timeline\r\n          sx={{\r\n            p: 0,\r\n          }}\r\n        >\r\n          {activities.map((activity) => (\r\n            <TimelineItem key={activity.time}>\r\n              <TimelineOppositeContent\r\n                sx={{\r\n                  fontSize: \"12px\",\r\n                  fontWeight: \"700\",\r\n                  flex: \"0\",\r\n                }}\r\n              >\r\n                {activity.time}\r\n              </TimelineOppositeContent>\r\n              <TimelineSeparator>\r\n                <TimelineDot\r\n                  variant=\"outlined\"\r\n                  sx={{\r\n                    borderColor: activity.color,\r\n                  }}\r\n                />\r\n                <TimelineConnector />\r\n              </TimelineSeparator>\r\n              <TimelineContent\r\n                color=\"text.secondary\"\r\n                sx={{\r\n                  fontSize: \"14px\",\r\n                }}\r\n              >\r\n                {activity.text}\r\n              </TimelineContent>\r\n            </TimelineItem>\r\n          ))}\r\n        </Timeline>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DailyActivities;\r\n","import React from \"react\";\r\nimport { Grid, Box } from \"@mui/material\";\r\n\r\nimport {\r\n  BlogCard,\r\n  SalesOverview,\r\n  ProductPerformance,\r\n  DailyActivities,\r\n} from \"./dashboard1-components\";\r\n\r\nconst Dashboard1 = () => {\r\n  // 2\r\n\r\n  return (\r\n    <Box>\r\n      <Grid container spacing={0}>\r\n        {/* ------------------------- row 1 ------------------------- */}\r\n        <Grid item xs={12} lg={12}>\r\n          <SalesOverview />\r\n        </Grid>\r\n        {/* ------------------------- row 2 ------------------------- */}\r\n        <Grid item xs={12} lg={4}>\r\n          <DailyActivities />\r\n        </Grid>\r\n        <Grid item xs={12} lg={8}>\r\n          <ProductPerformance />\r\n        </Grid>\r\n        {/* ------------------------- row 3 ------------------------- */}\r\n        {/* <BlogCard /> */}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Dashboard1;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Chip,\r\n  Avatar,\r\n  TablePagination,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\n\r\n// Replace with your actual API endpoint\r\nconst API_URL = \"https://bepocart.in/admin/Bepocart-saled-products/\";\r\n\r\nconst ExTable = () => {\r\n  const [products, setProducts] = useState([]);\r\n  const [page, setPage] = useState(0); // For pagination\r\n  const [rowsPerPage, setRowsPerPage] = useState(5); // Rows per page\r\n\r\n  // Fetch data from API\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const response = await axios.get(API_URL, {\r\n        headers: {\r\n          Authorization: `${localStorage.getItem('token')}`, // Ensure token is correct\r\n        },\r\n      });\r\n      const sortedProducts = response.data.total_saled_products.sort(\r\n        (a, b) => b.total_sold - a.total_sold\r\n      ); // Sorting products by total_sold in descending order\r\n      setProducts(sortedProducts || []);\r\n    } catch (error) {\r\n      console.error(\"Error fetching product data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  // Handle page change\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  // Handle rows per page change\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Get the current products to display based on pagination\r\n  const paginatedProducts = products.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        aria-label=\"simple table\"\r\n        sx={{\r\n          mt: 3,\r\n          whiteSpace: \"nowrap\",\r\n        }}\r\n      >\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"h6\">\r\n                Image\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"h6\">\r\n                Id\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"h6\">\r\n                Name\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"h6\">\r\n                Price\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell>\r\n              <Typography color=\"textSecondary\" variant=\"h6\">\r\n                Total Sold\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell align=\"right\">\r\n              <Typography color=\"textSecondary\" variant=\"h6\">\r\n                Budget\r\n              </Typography>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {paginatedProducts.map((product, index) => (\r\n            <TableRow key={product.id}>\r\n              <TableCell>\r\n                <Avatar\r\n                  src={product.image || \"/path/to/placeholder-image.jpg\"}\r\n                  alt={product.name}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography\r\n                  sx={{\r\n                    fontSize: \"15px\",\r\n                    fontWeight: \"500\",\r\n                  }}\r\n                >\r\n                  {index + 1 + page * rowsPerPage}\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Box\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <Box>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      sx={{\r\n                        fontWeight: \"600\",\r\n                      }}\r\n                    >\r\n                      {product.name.length > 20 ? `${product.name.slice(0, 20)}...` : product.name}\r\n                    </Typography>\r\n                    <Typography\r\n                      color=\"textSecondary\"\r\n                      sx={{\r\n                        fontSize: \"13px\",\r\n                      }}\r\n                    >\r\n                      {product.salePrice || \"N/A\"}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography color=\"textSecondary\" variant=\"h6\">\r\n                  {product.salePrice || \"N/A\"}\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Chip\r\n                  sx={{\r\n                    pl: \"4px\",\r\n                    pr: \"4px\",\r\n                    backgroundColor: product.pbg || \"grey\",\r\n                    color: \"#fff\",\r\n                  }}\r\n                  size=\"small\"\r\n                  label={product.total_sold || \"Unknown\"}\r\n                />\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                <Typography variant=\"h6\">\r\n                  ${product.total_sold * product.salePrice}\r\n                </Typography>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* Pagination controls */}\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={products.length}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        rowsPerPage={rowsPerPage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 25]} // Options for rows per page\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExTable;\r\n"],"names":["ProductPerformance","age","setAge","React","_jsx","Card","variant","children","_jsxs","CardContent","Box","sx","display","sm","xs","alignItems","Typography","marginBottom","gutterBottom","marginLeft","mt","lg","FormControl","minWidth","Select","labelId","id","value","onChange","event","target","label","MenuItem","overflow","ExTable","styled","maxWidth","height","margin","token","localStorage","getItem","MetricBox","_ref","theme","padding","spacing","borderRadius","shape","boxShadow","shadows","textAlign","justifyContent","flexDirection","breakpoints","down","MetricIcon","_ref2","fontSize","SalesOverview","orderData","setOrderData","useState","totalOrders","pendingOrders","completedOrders","todaysOrders","monthlyOrders","salesOverview","useEffect","async","orders","axios","get","headers","concat","data","length","filter","order","status","Date","created_at","toDateString","getMonth","name","error","console","fetchOrderData","seriessalesoverview","paddingBottom","marginTop","flexWrap","gap","backgroundColor","ShoppingCartIcon","color","fontWeight","HourglassEmptyIcon","CheckCircleIcon","TodayIcon","CalendarTodayIcon","Chart","options","grid","show","borderColor","strokeDashArray","left","right","bottom","plotOptions","bar","horizontal","columnWidth","endingShape","colors","fill","type","opacity","chart","offsetX","toolbar","foreColor","fontFamily","sparkline","enabled","dataLabels","markers","size","legend","xaxis","categories","labels","style","cssClass","yaxis","min","max","tickAmount","stroke","width","lineCap","tooltip","series","activities","time","text","DailyActivities","anchorEl","setAnchorEl","open","Boolean","handleClose","pb","mb","IconButton","undefined","onClick","currentTarget","MoreVertOutlinedIcon","Menu","MenuListProps","onClose","anchorOrigin","vertical","transformOrigin","map","option","selected","Timeline","p","activity","TimelineItem","TimelineOppositeContent","flex","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","Dashboard1","Grid","container","item","products","setProducts","page","setPage","rowsPerPage","setRowsPerPage","sortedProducts","Authorization","total_saled_products","sort","a","b","total_sold","fetchProducts","paginatedProducts","slice","_Fragment","Table","whiteSpace","TableHead","TableRow","TableCell","align","TableBody","product","index","Avatar","src","image","alt","salePrice","Chip","pl","pr","pbg","TablePagination","component","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions"],"sourceRoot":""}