{"version":3,"file":"static/js/426.4586f80c.chunk.js","mappings":"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","sources":["components/BaseCard/BaseCard.js","views/FormElements/ExSlider.js"],"sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  Box,\r\n  Typography,\r\n  Chip,\r\n} from \"@mui/material\";\r\n\r\nconst BaseCard = (props) => {\r\n  return (\r\n    <Card\r\n      variant=\"outlined\"\r\n      sx={{\r\n        p: 0,\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <Box p={2} display=\"flex\" alignItems=\"center\">\r\n        <Box>\r\n          <Typography variant=\"h4\">{props.title}</Typography>\r\n        </Box>\r\n        {props.chiptitle ? (\r\n          <Chip\r\n            label={props.chiptitle}\r\n            size=\"small\"\r\n            sx={{\r\n              ml: \"auto\",\r\n              fontSize: \"12px\",\r\n              fontWeight: \"500\",\r\n            }}\r\n          ></Chip>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Box>\r\n      <Divider />\r\n      <CardContent>{props.children}</CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default BaseCard;\r\n","import React from \"react\";\r\nimport { Grid, Box, Slider } from \"@mui/material\";\r\nimport BaseCard from \"../../components/BaseCard/BaseCard\";\r\nimport VolumeUpOutlinedIcon from '@mui/icons-material/VolumeUpOutlined';\r\nimport VolumeDownOutlinedIcon from '@mui/icons-material/VolumeDownOutlined';\r\n\r\nconst valuetext = (value) => {\r\n  return `${value}°C`;\r\n};\r\n\r\nfunction valuetext2(value) {\r\n  return `${value}°C`;\r\n}\r\n\r\nconst ExSlider = () => {\r\n  // 2\r\n  const [value, setValue] = React.useState(30);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [value2, setValue2] = React.useState([20, 37]);\r\n\r\n  const handleChange2 = (event2, newValue2) => {\r\n    setValue2(newValue2);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Grid container spacing={0}>\r\n        {/* ------------------------- row 1 ------------------------- */}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          lg={4}\r\n          sm={6}\r\n          sx={{\r\n            display: \"flex\",\r\n            alignItems: \"stretch\",\r\n          }}\r\n        >\r\n          <BaseCard title=\"Default Slider\">\r\n            <Slider defaultValue={30} aria-label=\"slider\" />\r\n          </BaseCard>\r\n        </Grid>\r\n\r\n        {/* ------------------------- row 1 ------------------------- */}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          lg={4}\r\n          sm={6}\r\n          sx={{\r\n            display: \"flex\",\r\n            alignItems: \"stretch\",\r\n          }}\r\n        >\r\n          <BaseCard title=\"Default Disabled Slider\">\r\n            <Slider disabled defaultValue={30} aria-label=\"slider\" />\r\n          </BaseCard>\r\n        </Grid>\r\n\r\n        {/* ------------------------- row 1 ------------------------- */}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          lg={4}\r\n          sm={6}\r\n          sx={{\r\n            display: \"flex\",\r\n            alignItems: \"stretch\",\r\n          }}\r\n        >\r\n          <BaseCard title=\"Default Volumn Slider\">\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <VolumeDownOutlinedIcon />\r\n              <Slider\r\n                aria-label=\"Volume\"\r\n                value={value}\r\n                onChange={handleChange}\r\n              />\r\n              <VolumeUpOutlinedIcon />\r\n            </Box>\r\n          </BaseCard>\r\n        </Grid>\r\n\r\n        {/* ------------------------- row 1 ------------------------- */}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          lg={4}\r\n          sm={6}\r\n          sx={{\r\n            display: \"flex\",\r\n            alignItems: \"stretch\",\r\n          }}\r\n        >\r\n          <BaseCard title=\"Default Discrete Slider\">\r\n            <Slider\r\n              aria-label=\"Temperature\"\r\n              defaultValue={30}\r\n              getAriaValueText={valuetext}\r\n              valueLabelDisplay=\"auto\"\r\n              step={10}\r\n              marks\r\n              min={10}\r\n              max={110}\r\n            />\r\n          </BaseCard>\r\n        </Grid>\r\n\r\n        {/* ------------------------- row 1 ------------------------- */}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          lg={4}\r\n          sm={6}\r\n          sx={{\r\n            display: \"flex\",\r\n            alignItems: \"stretch\",\r\n          }}\r\n        >\r\n          <BaseCard title=\"Default Range  Slider\">\r\n            <Slider\r\n              getAriaLabel={() => \"Temperature range\"}\r\n              value={value2}\r\n              onChange={handleChange2}\r\n              valueLabelDisplay=\"auto\"\r\n              getAriaValueText={valuetext2}\r\n            />\r\n          </BaseCard>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ExSlider;\r\n"],"names":["props","_jsxs","Card","variant","sx","p","width","children","Box","display","alignItems","_jsx","Typography","title","chiptitle","Chip","label","size","ml","fontSize","fontWeight","Divider","CardContent","valuetext","value","concat","valuetext2","ExSlider","setValue","React","value2","setValue2","Grid","container","spacing","item","xs","lg","sm","BaseCard","Slider","defaultValue","disabled","VolumeDownOutlinedIcon","onChange","handleChange","event","newValue","VolumeUpOutlinedIcon","getAriaValueText","valueLabelDisplay","step","marks","min","max","getAriaLabel","handleChange2","event2","newValue2"],"sourceRoot":""}